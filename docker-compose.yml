version: '3'

services:

  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    ports:
      - "3001:3001"
    volumes:
      - uptime-kuma-data:/app/data
    environment:
      - TIMEZONE=${TZ}
      - UPTIME_KUMA_USERNAME=${UPTIME_KUMA_USERNAME}
      - UPTIME_KUMA_PASSWORD=${UPTIME_KUMA_PASSWORD}
    restart: unless-stopped
    networks:
        - app_network

  api_manager:
    build: ./api_manager
    container_name: api_manager
    ports:
      - "5001:5000"
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - TZ=${TZ}
      - TEAM_NAME=${TEAM_NAME}
      - LOGGING_LEVEL=${LOGGING_LEVEL}
      - DOCKER_INFLUXDB_INIT_API_SERVER_TOKEN=${DOCKER_INFLUXDB_INIT_API_SERVER_TOKEN}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_USERNAME=${DOCKER_INFLUXDB_INIT_USERNAME}
      - sensorUUID_TEMPERATURE=${sensorUUID_TEMPERATURE}
      - sensorUUID_HUMIDITY=${sensorUUID_HUMIDITY}
      - sensorUUID_ILLUMINATION=${sensorUUID_ILLUMINATION}
      - AIMTEC_USERNAME=${AIMTEC_USERNAME}
      - AIMTEC_PASSWORD=${AIMTEC_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
        - ./api_manager:/app
    networks:
        - app_network


  api_server:
    build: ./api_server
    container_name: api_server
    ports:
      - "5000:5000"
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - TEAM_NAME=${TEAM_NAME}
      - DOCKER_INFLUXDB_INIT_API_SERVER_TOKEN=${DOCKER_INFLUXDB_INIT_API_SERVER_TOKEN}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_USERNAME=${DOCKER_INFLUXDB_INIT_USERNAME}
      - LOGGING_LEVEL=${LOGGING_LEVEL}
    volumes:
      - ./api_server:/app
    depends_on:
      - influxdb
    networks:
      - app_network

  influxdb_2_api_sync:
    build: ./influxdb_2_api_sync
    container_name: influxdb_2_api_sync
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - TEAM_NAME=${TEAM_NAME}
      - BROKER_IP=${BROKER_IP}
      - BROKER_PORT=${BROKER_PORT}
      - BROKER_USERNAME=${BROKER_USERNAME}
      - BROKER_PASSWORD=${BROKER_PASSWORD}
      - INFLUXDB_URL = "http://influxdb:8086"
      - DOCKER_INFLUXDB_INIT_API_2_INFLUX_TOKEN=${DOCKER_INFLUXDB_INIT_API_2_INFLUX_TOKEN}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - LOGGING_LEVEL=${LOGGING_LEVEL}
      - BASE_URL=${BASE_URL}
      - AIMTEC_USERNAME=${AIMTEC_USERNAME}
      - AIMTEC_PASSWORD=${AIMTEC_PASSWORD}
      - WRITE_TO_SELECTED=${WRITE_TO_SELECTED}
      - SYNC_INTERVAL=${SYNC_INTERVAL}
      - sensorUUID_TEMPERATURE=${sensorUUID_TEMPERATURE}
      - sensorUUID_HUMIDITY=${sensorUUID_HUMIDITY}
      - sensorUUID_ILLUMINATION=${sensorUUID_ILLUMINATION}
    volumes:
      - ./influxdb_2_api_sync:/app
    depends_on:
      - influxdb
    entrypoint: ./entrypoint.sh
    networks:
      - app_network

  web:
    image: nginx:latest
    container_name: nginx_webserver
    ports:
      - "8080:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
    restart: unless-stopped


  influxdb:
    image: influxdb:2.0
    container_name: influxdb
    ports:
      - "8086:8086"
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - DOCKER_INFLUXDB_INIT_MODE=${DOCKER_INFLUXDB_INIT_MODE}
      - DOCKER_INFLUXDB_INIT_USERNAME=${DOCKER_INFLUXDB_INIT_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${DOCKER_INFLUXDB_INIT_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - DOCKER_INFLUXDB_INIT_MQTT_CLIENT_TOKEN=${DOCKER_INFLUXDB_INIT_MQTT_CLIENT_TOKEN}
      - DOCKER_INFLUXDB_INIT_GRAFANA_TOKEN=${DOCKER_INFLUXDB_INIT_GRAFANA_TOKEN}
      - DOCKER_INFLUXDB_INIT_API_SERVER_TOKEN=${DOCKER_INFLUXDB_INIT_API_SERVER_TOKEN}
    volumes:
      - influxdb-data:/var/lib/influxdb2
    networks:
      - app_network


  mqtt_client:
    build: ./mqtt_client
    container_name: mqtt_client
    environment:
      - TZ=${TZ}
      - TEAM_NAME=${TEAM_NAME}
      - BROKER_IP=${BROKER_IP}
      - BROKER_PORT=${BROKER_PORT}
      - BROKER_USERNAME=${BROKER_USERNAME}
      - BROKER_PASSWORD=${BROKER_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_MQTT_CLIENT_TOKEN=${DOCKER_INFLUXDB_INIT_MQTT_CLIENT_TOKEN}
      - BASE_URL=${BASE_URL}
      - AIMTEC_USERNAME=${AIMTEC_USERNAME}
      - AIMTEC_PASSWORD=${AIMTEC_PASSWORD}
      - sensorUUID_TEMPERATURE=${sensorUUID_TEMPERATURE}
      - sensorUUID_HUMIDITY=${sensorUUID_HUMIDITY}
      - sensorUUID_ILLUMINATION=${sensorUUID_ILLUMINATION}
      - LOGGING_LEVEL=${LOGGING_LEVEL}
      - SEND_TO_API=${SEND_TO_API}
    entrypoint: ./entrypoint.sh
    restart: unless-stopped
    volumes:
      - ./mqtt_client:/app
    depends_on:
      - influxdb
    networks:
      - app_network

  nginx_proxy_manager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx_proxy_manager
    restart: unless-stopped
    ports:
      - "80:80"       # HTTP
      - "81:81"       # Web UI
      - "443:443"     # HTTPS
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
    networks:
      - app_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - DOCKER_INFLUXDB_INIT_GRAFANA_TOKEN=${DOCKER_INFLUXDB_INIT_GRAFANA_TOKEN}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/provisioning/dashboards:/var/lib/grafana/dashboards
      - ./grafana/grafana_startup.sh:/grafana_startup.sh
    entrypoint: [ "/bin/bash", "/grafana_startup.sh" ]
    restart: unless-stopped
    depends_on:
      - influxdb
    networks:
      - app_network

  faceid_server:
    build: ./auth_server
    ports:
      - "8181:8080"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TOKEN_EXPIRATION: ${TOKEN_EXPIRATION}
    restart: unless-stopped
    volumes:
      - ./images:/images
    networks:
      - app_network

  postgres:
    build: ./Postgre
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: unless-stopped
    ports:
      - "5432:5432" # Port pro přístup k databázi
    volumes:
      - postgres-data:/var/lib/postgresql/data # Persistování dat
    networks:
      - app_network

  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - ./backups:/backups
    depends_on:
      - postgres
      - influxdb
    networks:
      - app_network



networks:
  app_network:
    driver: bridge

volumes:
  influxdb-data:
  certs:  # Shared volume for Certbot and NGINX
  webroot:
    driver: local
  grafana-storage:
    driver: local
  uptime-kuma-data:
    driver: local
  postgres-data:






